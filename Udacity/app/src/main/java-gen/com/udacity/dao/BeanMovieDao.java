package com.udacity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.udacity.bean.BeanMovie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BeanMovie".
*/
public class BeanMovieDao extends AbstractDao<BeanMovie, Long> {

    public static final String TABLENAME = "BeanMovie";

    /**
     * Properties of entity BeanMovie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Poster_path = new Property(1, String.class, "poster_path", false, "POSTER_PATH");
        public final static Property Adult = new Property(2, Boolean.class, "adult", false, "ADULT");
        public final static Property Overview = new Property(3, String.class, "overview", false, "OVERVIEW");
        public final static Property Release_date = new Property(4, String.class, "release_date", false, "RELEASE_DATE");
        public final static Property Genre_ids = new Property(5, String.class, "genre_ids", false, "GENRE_IDS");
        public final static Property Movie_id = new Property(6, Integer.class, "movie_id", false, "MOVIE_ID");
        public final static Property Original_title = new Property(7, String.class, "original_title", false, "ORIGINAL_TITLE");
        public final static Property Original_language = new Property(8, String.class, "original_language", false, "ORIGINAL_LANGUAGE");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Backdrop_path = new Property(10, String.class, "backdrop_path", false, "BACKDROP_PATH");
        public final static Property Popularity = new Property(11, Float.class, "popularity", false, "POPULARITY");
        public final static Property Vote_count = new Property(12, Integer.class, "vote_count", false, "VOTE_COUNT");
        public final static Property Video = new Property(13, Boolean.class, "video", false, "VIDEO");
        public final static Property Vote_average = new Property(14, Float.class, "vote_average", false, "VOTE_AVERAGE");
        public final static Property Movie_type = new Property(15, Integer.class, "movie_type", false, "MOVIE_TYPE");
        public final static Property Favorite = new Property(16, Boolean.class, "favorite", false, "FAVORITE");
    }


    public BeanMovieDao(DaoConfig config) {
        super(config);
    }
    
    public BeanMovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BeanMovie\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"POSTER_PATH\" TEXT," + // 1: poster_path
                "\"ADULT\" INTEGER," + // 2: adult
                "\"OVERVIEW\" TEXT," + // 3: overview
                "\"RELEASE_DATE\" TEXT," + // 4: release_date
                "\"GENRE_IDS\" TEXT," + // 5: genre_ids
                "\"MOVIE_ID\" INTEGER," + // 6: movie_id
                "\"ORIGINAL_TITLE\" TEXT," + // 7: original_title
                "\"ORIGINAL_LANGUAGE\" TEXT," + // 8: original_language
                "\"TITLE\" TEXT," + // 9: title
                "\"BACKDROP_PATH\" TEXT," + // 10: backdrop_path
                "\"POPULARITY\" REAL," + // 11: popularity
                "\"VOTE_COUNT\" INTEGER," + // 12: vote_count
                "\"VIDEO\" INTEGER," + // 13: video
                "\"VOTE_AVERAGE\" REAL," + // 14: vote_average
                "\"MOVIE_TYPE\" INTEGER," + // 15: movie_type
                "\"FAVORITE\" INTEGER);"); // 16: favorite
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BeanMovie\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BeanMovie entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String poster_path = entity.getPoster_path();
        if (poster_path != null) {
            stmt.bindString(2, poster_path);
        }
 
        Boolean adult = entity.getAdult();
        if (adult != null) {
            stmt.bindLong(3, adult ? 1L: 0L);
        }
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(4, overview);
        }
 
        String release_date = entity.getRelease_date();
        if (release_date != null) {
            stmt.bindString(5, release_date);
        }
 
        String genre_ids = entity.getGenre_ids();
        if (genre_ids != null) {
            stmt.bindString(6, genre_ids);
        }
 
        Integer movie_id = entity.getMovie_id();
        if (movie_id != null) {
            stmt.bindLong(7, movie_id);
        }
 
        String original_title = entity.getOriginal_title();
        if (original_title != null) {
            stmt.bindString(8, original_title);
        }
 
        String original_language = entity.getOriginal_language();
        if (original_language != null) {
            stmt.bindString(9, original_language);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String backdrop_path = entity.getBackdrop_path();
        if (backdrop_path != null) {
            stmt.bindString(11, backdrop_path);
        }
 
        Float popularity = entity.getPopularity();
        if (popularity != null) {
            stmt.bindDouble(12, popularity);
        }
 
        Integer vote_count = entity.getVote_count();
        if (vote_count != null) {
            stmt.bindLong(13, vote_count);
        }
 
        Boolean video = entity.getVideo();
        if (video != null) {
            stmt.bindLong(14, video ? 1L: 0L);
        }
 
        Float vote_average = entity.getVote_average();
        if (vote_average != null) {
            stmt.bindDouble(15, vote_average);
        }
 
        Integer movie_type = entity.getMovie_type();
        if (movie_type != null) {
            stmt.bindLong(16, movie_type);
        }
 
        Boolean favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(17, favorite ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BeanMovie entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String poster_path = entity.getPoster_path();
        if (poster_path != null) {
            stmt.bindString(2, poster_path);
        }
 
        Boolean adult = entity.getAdult();
        if (adult != null) {
            stmt.bindLong(3, adult ? 1L: 0L);
        }
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(4, overview);
        }
 
        String release_date = entity.getRelease_date();
        if (release_date != null) {
            stmt.bindString(5, release_date);
        }
 
        String genre_ids = entity.getGenre_ids();
        if (genre_ids != null) {
            stmt.bindString(6, genre_ids);
        }
 
        Integer movie_id = entity.getMovie_id();
        if (movie_id != null) {
            stmt.bindLong(7, movie_id);
        }
 
        String original_title = entity.getOriginal_title();
        if (original_title != null) {
            stmt.bindString(8, original_title);
        }
 
        String original_language = entity.getOriginal_language();
        if (original_language != null) {
            stmt.bindString(9, original_language);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String backdrop_path = entity.getBackdrop_path();
        if (backdrop_path != null) {
            stmt.bindString(11, backdrop_path);
        }
 
        Float popularity = entity.getPopularity();
        if (popularity != null) {
            stmt.bindDouble(12, popularity);
        }
 
        Integer vote_count = entity.getVote_count();
        if (vote_count != null) {
            stmt.bindLong(13, vote_count);
        }
 
        Boolean video = entity.getVideo();
        if (video != null) {
            stmt.bindLong(14, video ? 1L: 0L);
        }
 
        Float vote_average = entity.getVote_average();
        if (vote_average != null) {
            stmt.bindDouble(15, vote_average);
        }
 
        Integer movie_type = entity.getMovie_type();
        if (movie_type != null) {
            stmt.bindLong(16, movie_type);
        }
 
        Boolean favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(17, favorite ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BeanMovie readEntity(Cursor cursor, int offset) {
        BeanMovie entity = new BeanMovie( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // poster_path
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // adult
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // overview
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // release_date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // genre_ids
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // movie_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // original_title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // original_language
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // backdrop_path
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // popularity
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // vote_count
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // video
            cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14), // vote_average
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // movie_type
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0 // favorite
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BeanMovie entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoster_path(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAdult(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setOverview(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRelease_date(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGenre_ids(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMovie_id(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setOriginal_title(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOriginal_language(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBackdrop_path(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPopularity(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setVote_count(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setVideo(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setVote_average(cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14));
        entity.setMovie_type(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setFavorite(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BeanMovie entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BeanMovie entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BeanMovie entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
